{"version":3,"file":"static/js/818.02ba0293.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/services/selector.js","components/ContactForm/ContactForm.js","components/Title/Title.styled.jsx","components/Title/Title.js","pages/ContactsBook/Global.styled.jsx","components/Contact-list/ContactList.styled.jsx","components/Loader/RortationLinesLoaler.styled.jsx","components/Loader/RortationLinesLoaler.js","components/Contact-list/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","pages/ContactsBook/ContactsBook.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n} from 'formik';\n\nexport const Title = styled.h1`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled(FormikForm)`\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #2a2a2a;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Button = styled.button`\n  border: 1px solid #101010;\n\n  padding: 8px;\n  // width: 96px;\n  color: aliceblue;\n  border-radius: 4px;\n  border-color: transparent;\n  font-size: 16px;\n  font-weight: 700;\n  font-family: Sofia Sans, sans-serif;\n  transition: background-color 0.3s ease, color 0.3s ease;\n  text-transform: capitalize;\n  background-color: #3771d2;\n}\n@media screen and (min-width: 768px) {\n  .Form__Btn {\n    width: 180px;\n    font-size: 18px;\n    padding: 11px;\n  }\n\n  :hover {\n    background-color: #6085d3;\n    color: #fdfdfd;\n    box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.1);\n  }\n`;\n// border: 1px solid ${p => p.theme.colors.black};\n// background-color: ${p => p.theme.colors.accent};\n//     color: ${p => p.theme.colors.white};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts;\nexport const selectContactsItems = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectShowingContacts = createSelector(\n   [selectContacts, selectFilter],\n   ({items}, filter) => {\n      return items.filter(contact =>\n         contact.name.toLowerCase().includes(filter.toLowerCase()))\n   }\n);","import { Formik, Field, ErrorMessage } from 'formik';\n\nimport * as Yup from 'yup';\nimport {\n  FormLabel,\n  Form,\n  Button,\n  Title,\n} from './ContactForm.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsItems, selectIsLoading } from 'redux/services/selector';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from \"notiflix\";\nimport { Input } from \"@chakra-ui/react\";\n\n\n\nconst ContactScheme = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Required!'),\n  number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required!'),\n});\n\n// export const ContactForm = ({ onAdd }) => {\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContactsItems);\n  // const isLoading = selectIsLoading; Такий запис людський але не працює, працює нелюдський - reactivskyj:\n  const  isLoading  = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({name, number}, { resetForm}) => {\n    // const contact = {\n    //   name,\n    //   phone: number,\n    // }\n    \n    const isNameInContacts = contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n    \n    if (isNameInContacts) return Notiflix.Notify.failure(`${name} is already in contacts!`);\n    if (name && number) {\n      dispatch(addContact({ name, number }));\n    } else {\n      console.log(\"Error: Name and Phone number are required\");\n    }\n  \n    resetForm();\n  }\n\n  return (\n    <div>\n      <Title>Phonebook</Title>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={ContactScheme}\n        onSubmit={handleSubmit}\n      >\n        <Form >\n          <FormLabel>\n            Name\n            <Field name=\"name\" >\n              {({ field }) => (\n                <Input {...field} placeholder=\"name\" size='md'\n                htmlSize={4} width='auto' variant='outline' />\n              )}\n            </Field>\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </FormLabel>\n          <FormLabel>\n            Number\n            <Field name=\"number\">\n            {({ field }) => (\n                <Input {...field} placeholder=\"phone number\" size='md'\n                htmlSize={4} width='auto' variant='outline' />\n              )}\n            </Field>\n            <ErrorMessage name=\"number\" component=\"span\" />\n          </FormLabel>\n          <Button type=\"submit\"\n            disabled =  {isLoading} \n          >\n            Add contact\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TitleS = styled.h2`\n    margin: 0;\n    padding: 8px 0 ;\n    font-size: 24px;\n`;","import PropTypes from 'prop-types';\nimport { TitleS } from \"./Title.styled\";\n\nexport const Title = ({title}) => {\n  return (\n      <TitleS>{title }</TitleS>\n  );\n}\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};","import 'modern-normalize';\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        margin: 10px;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n            'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n            sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    code {\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n        monospace;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const Contacts = styled.ul`\n   padding: 0;\n`\n\nexport const Contact = styled.li`\n   display: flex;\n   // width: 350px;\n   justify-content: space-between;\n   margin: 0 0 8px 0;\n   align-items: center;\n`","import styled from 'styled-components';\nexport const RotatingLinesLoader = styled.div`\n   z-index: 9;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   position: fixed;\n   top: 0;\n   left: 0;\n   width: 100vw;\n   height: 50vh;\n`;","import { RotatingLines } from  'react-loader-spinner'\nimport { RotatingLinesLoader } from './RortationLinesLoaler.styled'\n\nexport const Loader = () => {\nreturn  (\n\n    <RotatingLinesLoader>\n        <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n        />\n    </RotatingLinesLoader>\n)\n}\n","\nimport { selectError, selectIsLoading, selectShowingContacts } from 'redux/services/selector';\nimport { Contacts, Contact } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { delContact, fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader/RortationLinesLoaler';\nimport { Box} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n   const contacts = useSelector(selectShowingContacts);\n   const isLoading = useSelector(selectIsLoading);\n   const isError = useSelector(selectError);\n   const dispatch = useDispatch();\n\n\n   useEffect(() => {\n      dispatch(fetchContacts())\n   }, [dispatch]);\n   console.log('contact-list = ', contacts.items);\n   return (\n      <Box maxW=\"512px\" gap=\"12px\">\n         <Contacts>\n            { isLoading && <h2><Loader/></h2>}\n\n            {isError && <h2>error</h2>}  \n            {contacts.map(contact => {\n               return(\n                  <Contact key={contact.id}>\n                     <Box >\n                     {/* <Flex flex-direction='column'> Так нпрацює, працює через <br/>*/}\n                        <span>{contact.name}: </span>\n                        <br/>\n                        <span>{contact.number}</span>\n                     {/* </Flex> */}\n                     </Box>\n                     <button type=\"button\" onClick={\n                        ()=>dispatch(delContact(contact.id))} >Delete</button>\n                  </Contact>\n               );\n            })} \n\n         </Contacts>\n      </Box>\n   );\n};\n","import styled from 'styled-components';\n\nexport const Input  = styled.input`\nmargin-top: 10px;\n`","import { Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter, setValue } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n   const dispatch = useDispatch();\n   const filter = useSelector(getFilter);\n   return (\n      <>\n         <label>Find contacts by name<br/>\n            <Input \n               type=\"text\" \n               name='filter' \n               value={filter}           \n               onChange={(e) => {dispatch(setValue (e.currentTarget.value.toLowerCase()))}}\n            />\n         </label>         \n      </>\n   ); \n} \n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Title } from \"components/Title/Title\";\nimport { GlobalStyle } from \"./Global.styled\";\n// import { ContactList } from 'components/Contact-list/ContactList';\nimport { ContactList } from '../../components/Contact-list/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n// import { Layout } from 'components/Layout/Layout';\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { fetchContacts } from \"redux/contacts/operations\";\n// import { selectLoading } from \"redux/contacts/selectors\";\n\nconst ContactsBook = () => {\n  // const dispatch = useDispatch();\n  // const isLoading = useSelector(selectLoading);\n\n  // useEffect(() => {\n  //   dispatch(fetchContacts());\n  // }, [dispatch]);\n\n  return (\n    <>\n      <GlobalStyle />\n      < ContactForm />\n      <Title title=\"Contacts\" />\n      <Filter/>\n      <ContactList/>      \n    </>\n  );  \n};\n\nexport default ContactsBook;"],"names":["Title","styled","Form","FormikForm","FormLabel","Button","selectContactsItems","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectShowingContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactScheme","Yup","shape","matches","required","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","resetForm","some","Notiflix","addContact","console","log","field","I","placeholder","size","htmlSize","width","variant","component","type","disabled","TitleS","title","GlobalStyle","createGlobalStyle","Contacts","Contact","RotatingLinesLoader","Loader","strokeColor","strokeWidth","animationDuration","visible","ContactList","isError","useEffect","fetchContacts","maxW","gap","map","onClick","delContact","id","Input","Filter","getFilter","value","onChange","e","setValue","currentTarget"],"sourceRoot":""}